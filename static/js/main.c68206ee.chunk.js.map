{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","height","setHeight","weight","setWeight","bmiResult","setBmiResult","status","setStatus","className","type","placeholder","value","onChange","e","target","onClick","bmi","Number","toFixed","bmiStatus","getStatus","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGe,SAASA,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KAmBA,OACE,sBAAKC,UAAU,WAAf,UACA,qBAAKA,UAAU,MAAf,SACE,uBAAMA,UAAU,OAAhB,UACE,oBAAIA,UAAU,SAAd,6BACA,sBAAKA,UAAU,SAAf,UACE,4CAGA,uBACA,uBACEA,UAAU,IACVC,KAAK,OACLC,YAAY,eACZC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAUY,EAAEC,OAAOH,aAGxC,sBAAKH,UAAU,SAAf,UACE,4CAGA,uBACA,uBACEA,UAAU,IACVC,KAAK,OACLC,YAAY,eACZC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAUU,EAAEC,OAAOH,aAGxC,qBAAKH,UAAU,SAAf,SACE,wBACEA,UAAU,UACVC,KAAK,SACLM,QApDV,WACE,IAAIC,EAAMC,OAAOf,EAAM,SAAIF,EAAS,IAAQ,IAAGkB,QAAQ,GACvDb,EAAaW,GAEb,IAAIG,EAMN,SAAmBH,GACjB,OAAIA,EAAM,KAAa,2BACdA,GAAO,MAAQA,EAAM,KAAa,sBAClCA,GAAO,IAAMA,EAAM,KAAa,0BAC7B,QAVII,CAAUJ,GAC1BT,EAAUY,GAEVlB,EAAU,IACVE,EAAU,KAyCJ,6BAQDC,GACC,sBAAKI,UAAU,MAAf,UACE,8CAAiBJ,EAAjB,OACA,oDAAuBE,aAK/B,qBAAKE,UAAU,OAAf,SACA,qBAAKa,IAAI,oBAAoBrB,OAAU,QAEvC,qBAAKQ,UAAU,OAAf,SACE,qBAAKa,IAAI,mBAAmBrB,OAAU,WC9E5C,IAYesB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnC,EAAD,MAEFoC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c68206ee.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [height, setHeight] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [bmiResult, setBmiResult] = useState(null);\n  const [status, setStatus] = useState(\"\");\n\n  function calculateBMI() {\n    let bmi = Number(weight / (height / 100) ** 2).toFixed(2);\n    setBmiResult(bmi);\n\n    let bmiStatus = getStatus(bmi);\n    setStatus(bmiStatus);\n\n    setHeight(\"\");\n    setWeight(\"\");\n  }\n  function getStatus(bmi) {\n    if (bmi < 18.5) return \"Underweight 😐\";\n    else if (bmi >= 18.5 && bmi < 24.9) return \"Normal 😎\";\n    else if (bmi >= 25 && bmi < 29.9) return \"Overweight 😵\";\n    else return \"Obese\";\n  }\n\n  return (\n    <div className=\"fullview\">\n    <div className=\"box\">\n      <form className=\"form\">\n        <h1 className=\"header\"> BMI Calculator</h1>\n        <div className=\"height\">\n          <label>\n            Height:\n          </label>\n          <br/>\n          <input\n            className=\"h\"\n            type=\"text\"\n            placeholder=\"Height in cm\"\n            value={height}\n            onChange={(e) => setHeight(e.target.value)}\n          />\n        </div>\n        <div className=\"weight\">\n          <label>\n            Weight:\n          </label>\n          <br/>\n          <input\n            className=\"w\"\n            type=\"text\"\n            placeholder=\"Weight in kg\"\n            value={weight}\n            onChange={(e) => setWeight(e.target.value)}\n          />\n        </div>\n        <div className=\"button\">\n          <button\n            className=\"button1\"\n            type=\"Button\"\n            onClick={calculateBMI}\n          >\n            Calculate BMI\n          </button>\n        </div>\n        {bmiResult && (\n          <div className=\"bmi\">\n            <p>Your BMI is: {bmiResult} </p>\n            <p>You are currently: {status}</p>\n          </div>\n        )}\n      </form>\n    </div>\n    <div className=\"img1\">\n    <img src=\"./images/girl.png\" height = {400}/>\n    </div>\n    <div className=\"img2\">\n      <img src=\"./images/boy.png\" height = {400}/>\n    </div>\n    </div>    \n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}